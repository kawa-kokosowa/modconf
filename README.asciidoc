= modconf: Modem Configuration Manager

Python 3 command line (CLI) modem configuration file generator. Created for _US Internet_, for modem deployment automation.

Tested in Python 3.4 on FreeBSD.

= Usage

Generate modem configs for _all_ modem types, with the following settings:

  * username: bob
  * password: bobpass
  * superadmin password: sapass

----
python modconf.py bob bobpass sapass
----

The above will output the configs to the +output_dir+ defined in _settings.ini_. The above command should generate files into +output_dir+ like follows:

----
$ ls output
bob_bullet.cfg		bob_loco.cfg		bob_nano.cfg		bob_ps.cfg
bob_bullethp.cfg	bob_m.cfg		bob_pico.cfg
----

Let's delete the +output_dir+, so we can get to generating other configs:

----
$ python modconf.py --clean
$ ls output
ls: output: No such file or directory
----

Let's say you want to generate the following config _only_ for the _pico_ modem type:

  * modem type: pico
  * username: frank
  * password: frankpass
  * superadmin password: fancysapass

You just need to specify the +--mtype+ flag like such:

----
python modconf.py frank frankpass fancysapass --mtype=pico
----

And you'd find your file at +output/frank_pico.cfg+.

Don't forget to check +settings.ini+ for more options/to set your constants!

----
modconf.py: modem configuration

Usage:
  modconf.py <username> <password> <superadmin_password> [--mtype=MODEMTYPE]
  modconf.py --supported
  modconf.py --clean
  modconf.py (-h | --help)
  modconf.py --version

Arguments:
  MODEMTYPE      See --supported.

Options:
  --mtype=MTYPE  Modem type to generate config for. Default: ALL.
  --supported    Show supported modems.
  --clean        Remove all files in output directory.
  -h --help      Show this screen.
  --version      Show version.

----

Optional +--mtype+ can be +ALL+ (but this is already the default behavior)! Not defining, or using +ALL+ as +--mtype+ will generate a config for each supported modem.

= Setup

In the same directory as _modconf.py_, execute (in terminal):

----
pip install -r requirements.txt
----

== Caveat

The machine I was running had Perl's pip installed. I was initially testing this on a Windows machine, so I used the full path to pip via Command Prompt:

----
C:\Python34\Scripts\pip.exe install -r requirements.txt
----

= Supported Modem Types

  * bullet
  * bullethp
  * loco
  * m
  * nano
  * pico
  * ps

